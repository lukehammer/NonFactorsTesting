@using NonFactorsTesting.Models
@model IEnumerable<Rows>

@{
    Layout = null;
}
<script src="~/Scripts/jquery-3.1.0.js"></script>
<script src="~/Scripts/MvcGrid/mvc-grid.js"></script>

<link href="~/Content/MvcGrid/mvc-grid.css" rel="stylesheet" />


<!DOCTYPE html>
<style>
    td {
        white-space: nowrap;
    }

</style>
<a href=@Url.Action("TestGrid2")>Test Grid 2</a>

<p >attempting to replacate behavior of  <a href="http://mvc-grid.azurewebsites.net/Filter/Register">http://mvc-grid.azurewebsites.net/Filter/Register</a>  </p>
<p >But with Custom Enum. </p>


@(Html.Grid(Model)
      .Build(columns =>
      {
          columns.Add(model => model.InForeCastType).Titled("InForeCastType").Sortable(true).FilteredAs("InForeCastType");
          columns.Add(model => model.Test2).Titled("Test2").Filterable(false);
          columns.Add(model => model.Test3).Titled("Test3").Filterable(true);
          columns.Add(model => model.Test4).Titled("Test4");
          columns.Add(model => model.Test5).Titled("Test5");
          columns.Add(model => model.Test6).Titled("Test6").Sortable(true).Filterable(true);
          columns.Add(model => model.Test7).Titled("Test7").Sortable(true).Filterable(true);
          columns.Add(model => model.Test8).Titled("Test8").Sortable(true).Filterable(true);
          columns.Add(model => model.Test9).Titled("Test9").Sortable(true).Filterable(true);
          columns.Add(model => model.Test10).Titled("Test10").Sortable(true).Filterable(true);
          columns.Add(model => model.Test11).Titled("Test11").Sortable(true).Filterable(true);
          columns.Add(model => model.Test12).Titled("Test12").Sortable(true).Filterable(true);
          columns.Add(model => model.Test13).Titled("Test13").Sortable(true).Filterable(true);
          columns.Add(model => model.Test14).Titled("Test14").Sortable(true).Filterable(true);
          columns.Add(model => model.Test15).Titled("Test15").Sortable(true).Filterable(true);
          columns.Add(model => model.Test16).Titled("Test16").Sortable(true).Filterable(true);
          columns.Add(model => model.Test17).Titled("Test17").Sortable(true).Filterable(true);
          columns.Add(model => model.Test18).Titled("Test18").Sortable(true).Filterable(true);
          columns.Add(model => model.Test19).Titled("Test19").Sortable(true).Filterable(true);
          columns.Add(model => model.Test20).Titled("Test20").Sortable(true).Filterable(true);
          columns.Add(model => model.Test21).Titled("Test21").Sortable(true).Filterable(true);
          columns.Add(model => model.Test22).Titled("Test22").Sortable(true).Filterable(true);
          columns.Add(model => model.Test23).Titled("Test23").Sortable(true).Filterable(true);
          columns.Add(model => model.Test24).Titled("Test24").Sortable(true).Filterable(true);
          columns.Add(model => model.Test25).Titled("Test25").Sortable(true).Filterable(true);
          columns.Add(model => model.Test26).Titled("Test26").Sortable(true).Filterable(true);
      })
      .Filterable().Sortable()
      )



<div>
    <div class="popup-arrow"></div>
    <div class="popup-content">
        <div class="first-filter popup-group">
            <p>just testing the pop</p>
            <ul class="mvc-grid-boolean-filter">
                <li data-value="0">@(((InForeCastType) 0).ToString()) </li>
                <li data-value="1"> @(((InForeCastType) 1).ToString()) </li>
                <li data-value="2"> @(((InForeCastType) 2).ToString()) </li>
                <li data-value="3"> @(((InForeCastType) 3).ToString()) </li>

            </ul>
        </div>
    <div class="popup-button-group">
            <button class="btn btn-success mvc-grid-apply" type="button">✔</button>
            <button class="btn btn-danger mvc-grid-cancel" type="button">✘</button>
            </div>
        </div>

</div>
<script>
 
    $(document).ready(function () {
        console.log("ready!");
  
    
      
    var InForeCastTypeEqual = (function () {
        function InForeCastTypeEqual() {
        }

        InForeCastTypeEqual.prototype = {
            render: function (grid, popup, filter) {
                var lang = $.fn.mvcgrid.lang.Number;
                lang.NotSpecified = 'Not specified';

                popup.html(
                    '<div class="popup-arrow"></div>' +
                    '<div class="popup-content">' +
                    '<div class="first-filter popup-group">' +
                    '<ul class="mvc-grid-boolean-filter">' +
                    '<li ' + (filter.first.val == '0' ? 'class="active" ' : '') + 'data-value="0">' + @(((InForeCastType)0).ToString()) + '</li>' +
                    '<li ' + (filter.first.val == '1' ? 'class="active" ' : '') + 'data-value="1">' + @(((InForeCastType)1).ToString()) + '</li>' +
                    '<li ' + (filter.first.val == '2' ? 'class="active" ' : '') + 'data-value="2">' + @(((InForeCastType)2).ToString()) + '</li>' +
                    '<li ' + (filter.first.val == '3' ? 'class="active" ' : '') + 'data-value="3">' + @(((InForeCastType)3).ToString()) + '</li>' +
                    '</ul>' +
                    '</div>' +
                    '<div class="popup-button-group">' +
                    '<button class="btn btn-success mvc-grid-apply" type="button">✔</button>' +
                    '<button class="btn btn-danger mvc-grid-cancel" type="button">✘</button>' +
                    '</div>' +
                    '</div>');
            },

            init: function (grid, column, popup) {
                this.bindValue(grid, column, popup);
                this.bindApply(grid, column, popup);
                this.bindCancel(grid, column, popup);
            },
            bindValue: function (grid, column, popup) {
                var values = popup.find('.first-filter li');
                values.on('click.mvcgrid', function () {
                    $(this).addClass('active').siblings().removeClass('active');
                });
            },
            bindApply: function (grid, column, popup) {
                var apply = popup.find('.mvc-grid-apply');
                apply.on('click.mvcgrid', function () {
                    popup.removeClass('open');
                    column.filter.first.val = popup.find('.first-filter .active').data('value');
                    if (column.filter.first.val == 'NotSpecified') {
                        column.filter.first.type = 'Is';
                    } else {
                        column.filter.first.type = 'Equals';
                    }

                    grid.applyFilter(column);
                    grid.reload();
                });
            },
            bindCancel: function (grid, column, popup) {
                var cancel = popup.find('.mvc-grid-cancel');
                cancel.on('click.mvcgrid', function () {
                    popup.removeClass('open');

                    if (column.filter.first.type) {
                        grid.cancelFilter(column);
                        grid.reload();
                    }
                });
            }
        };;

        return InForeCastTypeEqual;
    })();

    $('.mvc-grid').mvcgrid({
        filters: {
            'InForeCastType': new InForeCastTypeEqual()
        }
    });
    });

    $('.mvc-grid').mvcgrid();

</script>
